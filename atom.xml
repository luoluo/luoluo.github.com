<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LOG.02]]></title>
  <link href="http://luoluo.github.com/atom.xml" rel="self"/>
  <link href="http://luoluo.github.com/"/>
  <updated>2012-06-09T17:36:30+08:00</updated>
  <id>http://luoluo.github.com/</id>
  <author>
    <name><![CDATA[Luoluo]]></name>
    <email><![CDATA[luoluo1920@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从分蛋糕说起]]></title>
    <link href="http://luoluo.github.com/blog/2012/06/04/cong-fen-dan-gao-shuo-qi"/>
    <updated>2012-06-04T16:04:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/06/04/cong-fen-dan-gao-shuo-qi</id>
    <content type="html"><![CDATA[<p>网友如下求助：如何分配总租值为2700的三个房间，使三人都满意。如果是两个人分得话，马上就想到了“小熊分蛋糕”的问题。
说熊妈妈两个熊宝宝一块蛋糕，一个合理的分割方案是：宝宝1切蛋糕，宝宝2选择蛋糕。此方案有一个妙处在于，博弈双方各占优势，又各占劣势，宝宝1切割的优势与选择的劣势的结合使得他必须尽可能降低其切割优势，因为他必须对他的切割劣势埋单，即切割尽可能平均。这样的结果就是：切割方不在具有优势，选择方就也丧失了劣势，因为前者已经放弃了优势(因为他选择尽可能平均分配)，使得他的选择的优势也失去了意义。最终的结果是：该分配双方均不占优势，双方均觉得公平。利用这个方案，可以很好的解决两个人分割利益\责任的问题，我们只需使一方为划分者，另一方为选择方就可以了。
显然，这个方案只能局限与两人分割情形。那么对于多人分割又当如何处理呢？
这里先说一下上述问题的升级版：假设熊妈妈给了宝宝们两块味道不同的蛋糕，一个合理的分割方案是：宝宝1切蛋糕1，宝宝2切蛋糕2，切某一蛋糕的宝宝就会丧失那次切割的选择权，即：宝宝2在选择蛋糕1的部分具有优先权，宝宝1在选择蛋糕2的部分具有优先选择权。如果两个宝宝的口味一致，即蛋糕对他们来说具有相同价值，那么就把问题转化为了两个基本分蛋糕的问题。  如果两个宝宝对蛋糕喜好的口味不一致，那么博弈的结果可能就是宝宝各会分得自己喜爱的完整蛋糕。
此问题可以衍生出一个现实问题：A，B公同租总价为p两房间房子。那么一个合理的分割方案为：A，B分别提供自己的定价方案：假设A对两房子的定价分别为a1,a2(a1+a2=p)；同理B对两房子的定价分别为b1,b2.则我们做以下计算：p1=(a1+b1)/2;p2=(a2+b2)/2;此时，两房子的定价即为p1,p2且满足p1+p2=p。那么房子如何分配呢？a1，b1中的大值者来负责p1，a2，b2中的大值者来负责p2.可以证明，该方案是一种很合理的分个方案。
那么对于更多个参与者，怎么处理，只需对上述过程拓展，即得到通解：
对n个人分担\负责价值p(分为n个子部分)的问题来说，解决方案：
第i个人对k部分的$x_y$估价为：
$\sum$
$$
\sum
$$</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FLODING IN VIM]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/18/floding-in-vim"/>
    <updated>2012-05-18T12:36:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/18/floding-in-vim</id>
    <content type="html"><![CDATA[<h5 id="vim">对于结构复杂代码，VIM折叠功能对于思路清晰化、代码结构可读化，均有奇效。</h5>
<p>我所用的有效的折叠方案：
###<code>set menthod=manual</code>
对于代码：   </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>example.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="esc--shift--v-visual-">使用<code>Esc + Shift + v</code>进入 visual 模式</h5>
<p>#####然后<code>number + j</code>选定要折叠的行
#####使用<code>s + f</code>折叠选定的行
#####展开折叠<code>空格</code>
####折后效果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>foldedExample.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="o">+--</span>  <span class="mi">4</span> <span class="err">行</span><span class="o">:</span> <span class="p">{</span><span class="o">------------------------------------------------------------</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="zo">打开折叠<code>z+o</code></h4>
<p>####打开文件中所有折叠<code>z+O</code>
####删除一个折叠<code>z+e</code> 
####删除文件中所折叠<code>z+e</code> 
####折叠不会被写入到文件里，如果使用<code>cat</code> <code>less</code>查看代码，代码将以无任何折叠的方式显示。</p>

<blockquote>
  <p>A folder is just a tag which tells vim to display something as a folder. So it is also possible to write a file with folders.
To mark the start of a folder just use for example in a comment of a source file)
and to mark the end of the folder.   </p>
</blockquote>

<h5 id="formorehttpvimdocsourceforgenethtmldocfoldhtml"><a href="http://vimdoc.sourceforge.net/htmldoc/fold.html">ForMore</a></h5>
<p>#####<a href="https://www.linux.com/learn/tutorials/442438-vim-tips-folding-fun">Awesome</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/13/shell"/>
    <updated>2012-05-13T18:50:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/13/shell</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/12/sort"/>
    <updated>2012-05-12T13:44:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/12/sort</id>
    <content type="html"><![CDATA[<h4 id="stl">STL中最常用的函数之一，排序的神器。</h4>
<p>###sort</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>function sort.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="o">&lt;</span><span class="n">algorithm</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">RandomAccessIterator</span><span class="o">&gt;</span>
</span><span class="line">  <span class="kt">void</span> <span class="n">sort</span> <span class="p">(</span> <span class="n">RandomAccessIterator</span> <span class="n">first</span><span class="p">,</span> <span class="n">RandomAccessIterator</span> <span class="n">last</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">RandomAccessIterator</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Compare</span><span class="o">&gt;</span>
</span><span class="line">  <span class="kt">void</span> <span class="n">sort</span> <span class="p">(</span> <span class="n">RandomAccessIterator</span> <span class="n">first</span><span class="p">,</span> <span class="n">RandomAccessIterator</span> <span class="n">last</span><span class="p">,</span> <span class="n">Compare</span> <span class="n">comp</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="function">function</h3>
<blockquote>
  <p>Sort elements in range
Sorts the elements in the range [first,last) into ascending order.</p>

  <p>The elements are compared using operator&lt; for the first version, and comp for the second.</p>

  <p>Elements that would compare equal to each other are not guaranteed to keep their original relative order.</p>

  <h3 id="parameters">Parameters</h3>
  <p>first, last
Random-Access iterators to the initial and final positions of the sequence to be sorted. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.
comp
Comparison function object that, taking two values of the same type than those contained in the range, returns true if the first argument goes before the second argument in the specific strict weak ordering it defines, and false otherwise.</p>

  <h3 id="return-value">Return value</h3>
  <p>none</p>
</blockquote>

<h3 id="example">Example</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>example.cpp</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">// sort algorithm example</span>
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class="line"><span class="cp">#include &lt;vector&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">bool</span> <span class="n">myfunction</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">myclass</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">bool</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="p">);}</span>
</span><span class="line"><span class="p">}</span> <span class="n">myobject</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">myints</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">32</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">26</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="mi">53</span><span class="p">,</span><span class="mi">33</span><span class="p">};</span>
</span><span class="line">  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">myvector</span> <span class="p">(</span><span class="n">myints</span><span class="p">,</span> <span class="n">myints</span><span class="o">+</span><span class="mi">8</span><span class="p">);</span>               <span class="c1">// 32 71 12 45 26 80 53 33</span>
</span><span class="line">  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// using default comparison (operator &lt;):</span>
</span><span class="line">  <span class="n">sort</span> <span class="p">(</span><span class="n">myvector</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">myvector</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">4</span><span class="p">);</span>           <span class="c1">//(12 32 45 71)26 80 53 33</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// using function as comp</span>
</span><span class="line">  <span class="n">sort</span> <span class="p">(</span><span class="n">myvector</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="n">myvector</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">myfunction</span><span class="p">);</span> <span class="c1">// 12 32 45 71(26 33 53 80)</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// using object as comp</span>
</span><span class="line">  <span class="n">sort</span> <span class="p">(</span><span class="n">myvector</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">myvector</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">myobject</span><span class="p">);</span>     <span class="c1">//(12 26 32 33 45 53 71 80)</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// print out content:</span>
</span><span class="line">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;myvector contains:&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">it</span><span class="o">=</span><span class="n">myvector</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span><span class="o">!=</span><span class="n">myvector</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="output">Output:</h3>
<blockquote>
  <p>myvector contains: 12 26 32 33 45 53 71 80</p>
</blockquote>

<h3 id="complexity">Complexity</h3>
<blockquote>
  <p>Approximately N*logN comparisons on average (where N is last-first).
In the worst case, up to N2, depending on specific sorting algorithm used by library implementation.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Permutation]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/09/next-permutation"/>
    <updated>2012-05-09T22:06:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/09/next-permutation</id>
    <content type="html"><![CDATA[<h3 id="tc">做TC练习的时候，学习高手的代码，看到了这个神器。用于生成不重复的且不小于当前排列的全排列。</h3>
<p>##next_permutation</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>function fun.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"> <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">BidirectionalIterator</span><span class="o">&gt;</span>
</span><span class="line">  <span class="kt">bool</span> <span class="n">next_permutation</span> <span class="p">(</span><span class="n">BidirectionalIterator</span> <span class="n">first</span><span class="p">,</span>
</span><span class="line">                         <span class="n">BidirectionalIterator</span> <span class="n">last</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">BidirectionalIterator</span><span class="p">,</span> <span class="k">class</span> <span class="nc">Compare</span><span class="o">&gt;</span>
</span><span class="line">  <span class="kt">bool</span> <span class="n">next_permutation</span> <span class="p">(</span><span class="n">BidirectionalIterator</span> <span class="n">first</span><span class="p">,</span>
</span><span class="line">                         <span class="n">BidirectionalIterator</span> <span class="n">last</span><span class="p">,</span> <span class="n">Compare</span> <span class="n">comp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="transform-range-to-next-permutation">Transform range to next permutation</h3>
<blockquote>
  <p>Rearranges the elements in the range [first, last) into the lexicographically next greater permutation of elements. The comparisons of individual elements are performed using either operator&lt; for the first version, or comp for the second.</p>
</blockquote>

<blockquote>
  <p>A permutation is each one of the N! possible arrangements the elements can take (where N is the number of elements in the range). Different permutations can be ordered according on how they compare lexicographicaly to each other; The first such-sorted possible permutation (the one that would compare lexicographically smaller to all other permutations) is the one which has all its elements sorted in ascending order, and the largest has all its elements sorted in descending order.</p>
</blockquote>

<blockquote>
  <p>If the function can determine the next higher permutation, it rearranges the elements as such and returns true. If that was not possible (because it is already at the largest), it rearranges the elements according to the first permutation (sorted in ascending order) and returns false.</p>
</blockquote>

<h3 id="parameters">Parameters</h3>
<blockquote>
  <p>first, last
Bidirectional iterators to the initial and final positions of the sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.
comp
Comparison function object that, taking two values of the same type than those contained in the range, returns true if the first argument is to be considered less than the second argument.</p>
</blockquote>

<h3 id="return-value">Return value</h3>
<blockquote>
  <p>true if the function could rearrange the object as a lexicographicaly greater permutation. Otherwise, the function returns false to indicate that the arrangement is not greater than the previous, but the lowest possible (sorted in ascending order).</p>
</blockquote>

<h3 id="example">Example</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>next_permutation tset.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">myints</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The 3! possible permutations with 3 elements:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">sort</span> <span class="p">(</span><span class="n">myints</span><span class="p">,</span><span class="n">myints</span><span class="o">+</span><span class="mi">3</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">do</span> <span class="p">{</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">myints</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">myints</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">myints</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span> <span class="n">next_permutation</span> <span class="p">(</span><span class="n">myints</span><span class="p">,</span><span class="n">myints</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="output">Output:</h3>
<p>The 3! possible permutations with 3 elements:</p>

<p>1 2 3 <br />
1 3 2 <br />
2 1 3 <br />
2 3 1 <br />
3 1 2 <br />
3 2 1 <br />
####注意
当输出{1, 1, 1}的全排列时只输出一组“1 1 1”；
###上升全排列
  <code>int myints[] = {1,2,3};</code>
输出为：<br />
1 2 3 <br />
1 3 2 <br />
2 1 3 <br />
2 3 1 <br />
3 1 2 <br />
3 2 1 <br /></p>

<p><code>int myints[] = {3,2,1};</code>
输出为：<br />
3 2 1<br /></p>

<p><code>int myints[] = {2,3,1};</code>
输出为：<br />
2 3 1 <br />
3 1 2 <br />
3 2 1 <br />
####所以想得到给定数组元素的全排列，首先要<a href="http://luoluo.github.com/blog/2012/05/12/sort/">sort</a>为单调上升序列。
###Complexity
&gt;At most, performs one half as many swaps as the number of elements in the range.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphviz &amp; DOT]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/09/graphviz-and-dot"/>
    <updated>2012-05-09T18:29:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/09/graphviz-and-dot</id>
    <content type="html"><![CDATA[<h4 id="tlgraphviz--dot-language-wiki--">脑袋里有一个模糊的“思维导图”的东东，当然之前没有“思维导图”的概念，最近浏览TL时，偶得一利器Graphviz &amp; DOT language. 恰是吾之所求。下面是WIKI &amp; 官网的简介。</h4>

<h3 id="graphviz">Graphviz:</h3>
<blockquote><p>AT&amp;T Labs Tools for viewing and interacting with graph diagrams.<br />Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. Automatic graph drawing has many important applications in software engineering, database and web design, networking, and in visual interfaces for many other domains. Graphviz is open source graph visualization software. It has several main graph layout programs.</p></blockquote>
<p><strong>DOT</strong></p>
<blockquote><p>DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. DOT graphs are typically files that end with the .gv (or .dot) extension. The .gv extension is preferred, as the .dot file extension is used by Microsoft Office 2003.</p></blockquote>
<p>####简而言之，我们用dot语言来表达我们的思想，将流程、关系利用Graphviz“翻译”图形化。Graphviz主要支持两种关系图：
* 有向
* 无向</p>

<h3 id="br">无向图：<br /></h3>
<p>这是DOT最简单的应用。只需用“- -”来表示节点间有关系的。例子如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Undirected graph test2 file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">graph graphName{
</span><span class="line">	a -- b -- c;
</span><span class="line">	b -- d;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/39/DotLanguageUndirected.svg/220px-DotLanguageUndirected.svg.png" width="150" height="250" /></p>

<h3 id="br-1">有向图：<br /></h3>
<p>同样是DOT简单的应用。只需用“- &gt;”来表示节点间有关系的。例子如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Directed graph test2 file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">digraph graphName{
</span><span class="line">	a -&gt; b -&gt; c;
</span><span class="line">	b -&gt; d;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/DotLanguageDirected.svg/168px-DotLanguageDirected.svg.png" width="150" height="250" /></p>

<h3 id="section">修改样式：</h3>
<p>在花括号内添加边和节点的定义</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">node [shape="record"];
</span><span class="line">edge [style="dashed"];</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="linkhttpwwwicodeitorge4bdbfe794a8graphvize7bb98e588b6e6b581e7a88be59bbe">此外，还支持子图绘制、数据结构图形化等进阶功能。参见：<a href="http://www.icodeit.org/%E4%BD%BF%E7%94%A8graphviz%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE/">link</a></h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[夜空里的绚烂]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/04/ye-kong-li-de-xuan-lan"/>
    <updated>2012-05-04T20:34:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/04/ye-kong-li-de-xuan-lan</id>
    <content type="html"><![CDATA[<p>五一已过。任务没有完成。好久没有静下来想点什么、做点什么了。但时间还是一样的过。看一下自己的备忘表，已经快一周没有记录与勾画了。想起一句话“宁要一个结束，也不要千万个开始”。“善始者实繁，克终者盖寡”,总是习惯于做那个分母。</p>

<p>好久没有失眠了，好久没有清醒的过活。好像只有稀里糊涂的安逸才能在夜里顺其自然的入眠。细想一下最近过的还好。充满幸福感的五一。</p>

<p>当我呆在一个小空间里太久，结果产生错觉，以为自己掌握了整个人生。触摸世界成了坐井观天，甚至根本不会去想世界的五彩。越来越发觉世界真的好大好大，琦丽无比，就如梦中的情人，朦胧的美感，唯有用心去细细体味。越来越觉得人可以活得很丰富很丰富，有时，我们可以像一只目不转睛般伏猎几日的非洲狮；有时，我们可以像一只冲破牢笼回归自然的幼鸟。</p>

<p>长大了么？开始觉得人要学会适应孤独，“一个人要活得像一支队伍”。
还记得那“的叔”，满脸微笑兴奋的指着我说：“这么小耍啥子朋友”。一边指给我们乘车的方向，而后又对我们说“有没有十八岁？”。我笑着想小鸡啄米般点头…</p>

<p>记录一下短期到计划，充实的暑假前的生活，啃书，听歌，给亲人朋友问候，生活再规律一点点…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to uCOS for MSP430]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/15/how-to-ucos-for-msp430.markdown"/>
    <updated>2012-04-15T00:41:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/15/how-to-ucos-for-msp430.markdown</id>
    <content type="html"><![CDATA[今天磨蹭了一天，也还是没有结果，现在有了源码。有了PARTS。但是编译是终会有这样的错误提示：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ucos_ii.c:24:21: 致命错误： ucos_ii.h：没有那个文件或目录
</span><span class='line'>编译中断。</span></code></pre></td></tr></table></div></figure>
不清楚是什么问题，明明有那个文件，就是提示不存在。

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文件解压]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/12/wen-jian-jie-ya"/>
    <updated>2012-04-12T20:11:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/12/wen-jian-jie-ya</id>
    <content type="html"><![CDATA[<p>每次文件解压都要去翻鸟哥。今天总结下：
文件后缀名有：x.Z \ x.gz2 x.tar x.tar.gz x.gz.值得一提的是查看压缩文件不一定需要解压文件。
<!--more-->
x.Z
压缩命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">compress xx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解压命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">compress -d xx.Z</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>x.gz2
压缩命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bzip2 -z xx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解压命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bzip2 -d xx.zp2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看压缩文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bzcat xx.zp2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>x.tar</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar [-zxcvfppP]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>压缩命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar -cvf xx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解压命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar -xvf xx.tar</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>xx.tar.gz
压缩命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar -zcvf xx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解压命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar -xcvf xx.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>xx.bz
压缩命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gzip  xx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解压命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gzip -d xx.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看压缩文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">zcat xx.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后意外发现vim命令模式下x有delete作用。
今天刷豆瓣，发现了一个很丰富的人。突然感觉自己有时侯活得糊涂。
很欣赏凯文的清醒、大局观。看到这样一句话：
我们享乐的时刻，我们忘记了自己，忘记了我们的存在；这时候，我们变成为另外的一个人，一个陌生的存在体，我们隔离了自己。
作为结语。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暖]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/12/nuan"/>
    <updated>2012-04-12T00:10:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/12/nuan</id>
    <content type="html"><![CDATA[<p>暖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小结0.1]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/09/xiao-jie-0-dot-1"/>
    <updated>2012-04-09T20:47:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/09/xiao-jie-0-dot-1</id>
    <content type="html"><![CDATA[<p>最近过得略忙乱，WIN莫名不可重装的坏点，断了我游戏的念。</p>

<p>身边的朋友要么游戏的醉生梦死，要么开始做各种项目。两边都有人来拉我入伙，真有点犹犹豫豫，不知所措。又是一年银杏黄，朋友们拉我做的项目各种应
用、网络、加密…… 一时心动的有，可想一下要做大半年，还是摇摇头，微笑的说不了。 很久前就决定了要做什么，可是现在要做的真的还有很多。。  要从数学（算法）和计算机系统（包含硬件）两方面深入。 总觉的要先投入时间，把操作系统做好才有希望做出点有用的东东。还觉得关键时候的较量就是在数学上的较量，抑或思维上的较量。</p>

<p>周末的时候，睡意朦胧，接到阳仔的电话，叫我去考试。手机上赫然写着8：5X，顿时清醒，飞奔下床，带着昨夜收拾好的东西，RUSH。路上不忘打电话问下一夜火车的她到没。放心后，到教室，听力开始放了。冷静的拿出东西，装电池，调频……不知多久没有早读，念英语了….做起来没有想象中那么不顺手，感觉蛮简单的，由于无前期准备付出，所以没有报希望，这段时间在忙其他的。 做起来也很轻松的。    时间默默流淌，老师一句“还有10分钟”，把我叫醒，从投入做题中，从梦回高三……    还有两篇作文作文……   作文还是答题卡填写答案的我开始纠结，是写作文还是抄写答案。想到可以等老师收的时候拖一下，在10分钟内秒掉两篇“作文”，开始抄答案到答题卡上，刚刚10多题，考试的钟声想起，老师缓缓走过来。50+的选择题还没有开始涂。老师一副公正的表情对着我，“考试 时间到了……”，第一次考试没完成……  增加了人生的阅历了，不过它也深深的刺了我一刀。  英语已变的这么陌生。该拾起来了，毕竟自己还是蛮喜欢的。</p>

<p>5.1前只有几件事做好就可以了：
&lt;1&gt;单片机跑起系统
&lt;2&gt;做几场比赛
&lt;3&gt;其中考试漂亮点</p>

<table>
  <tbody>
    <tr>
      <td>&lt;4&gt;母函数</td>
      <td>CSAPP的笔记找时间好好写。</td>
    </tr>
  </tbody>
</table>

<p>NEVER STOP PRACTISING 
NEVER STOP PROGRAMMING</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TC at Linux]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/09/tc-at-lineux"/>
    <updated>2012-04-09T19:58:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/09/tc-at-lineux</id>
    <content type="html"><![CDATA[<p>HOW TO： TC ON LINUX</p>

<p>1.JAVA ENVIRONMENT（SUN-JAVA6）</p>

<p>&lt;1&gt;添加partner源：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo add-apt-repository "deb http://archive.canonical.com/u    buntu maverick partner"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>&lt;2&gt;安装JRE</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install sun-java6-jre sun-java6-plugin</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>&lt;3&gt;安装JDK</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install sun-java6-jdk sun-java6-plugin</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>&lt;4&gt;查看版本</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -version</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>&lt;5&gt;设为默认JAVA	</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo update-alternatives --config java</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.DOWNLOAD THE TC ARENA
<a href="http://www.topcoder.com/contest/arena/ContestAppletProd.jnlp">
DOWNLOAD </a></p>

<p>3.CONFIG THE AREAN
<a href="http://community.topcoder.com/tc?module=Static&amp;d1=applet&amp;d2=plugins"> 插件下载及配置DOWNLOAD </a>
推荐只使用KawigiEdit插件，该插件易于上手。</p>

<p>4.GET ON THE WAY, &amp; GOOD LUCK!
<a href="http://apps.topcoder.com/wiki/display/tc/How+to+Compete+in+SRM+Algorithm+Competitions">官方教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To:Lunchpad MSP430 programing with Linux]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/07/how-to-lunchpad-msp430-programing-with-linux"/>
    <updated>2012-04-07T04:37:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/07/how-to-lunchpad-msp430-programing-with-linux</id>
    <content type="html"><![CDATA[<p>天快亮了，反而没有什么倦意，一夜的奋战终见起色，称记忆清晰，做记录，供后车之鉴。开学不久就接到了五一前要交付的任务，4月探头，才逼的自己来做。windows莫名其妙的坏掉，把自己比逼linux这种直接的环境，一直感觉linux环境下自己面对问题，接近点底层，是个不错的选择。可是入门稍有门槛。毕竟文字的信息传递速度要小于图形化。加上自己的惰性，就迟迟未出发。</p>

<p>早就体会到实践的巨大力量，想重单片机起步逐渐理解计算机系统，并在最后系统。可是之前却是止步与WINDOWS，机缘巧合，投身LINUX麾下，顿感原来的那种清爽感。按需分配。
<!--more-->
1.LINUX下MSP430编程环境的搭建：  这个环境大概可以分为两个主要的部分：编译环境、写入环境。</p>

<p>&lt;1&gt;编译环境：mspgcc
可以说绝大多数的时间都耗在了，在网上看了N多的教程，于是乎走了N多的弯路。情况是：</p>
<blockquote><p>mspgcc4 is no longer supported. All contributions have been incorporated into mspgcc, which has newer versions of all components.</p></blockquote>
<p>也就是说，mspgcc4是不在被支持的了，而mspgcc更新过后继承支持mspgcc4的特性。而网上看到的绝大多数教程是基于mspgcc4的，利用网上反复的教程，我在install 与 rm间徘徊，系统的错误提示很SIMPLE：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lo@lo:~$ /opt/msp-gcc-4.4.5/bin/msp-gcc -oS -o blink.elf blink.c
</span><span class="line">bash: /opt/msp-gcc-4.4.5/bin/msp-gcc: 没有那个文件或目录</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不知为何，mspgcc总是在躲起来，甚至 find 也没法，或则说它没有出现过。真是很奇怪。试了又试，错误提示一直未变。</p>

<p>&lt;2&gt;写入环境：mspdebug
在单片机挂载到计算机上后，可以执行写入。在挂在后，单片机不再执行原有的程序，而是静静的等待写入，当^D退出mspdebug后，单片机执行新写入的程序，</p>

<p>看到了那样的提示，才暮然发现自己只需一个编译器和写入器，干嘛不直接安装呢？
这是看到了WIKI的提示，</p>
<blockquote><p>mspgcc will be available in Ubuntu Oneiric.</p></blockquote>
<p>而UBUNTU11.10 即 ONEIRIC。</p>

<p>于是乎： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install msp430-libc
</span><span class="line">sudo apt-get install mspdebug
</span><span class="line">sudo apt-get install msp430mcu
</span><span class="line">sudo apt-get install binutils-msp430
</span><span class="line">sudo apt-get install gcc-msp430
</span><span class="line">sudo apt-get install gdb-msp430</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译和写入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lo@lo:~$ msp430-gcc -oS -o blink.elf blink.c
</span><span class="line">lo@lo:~$ sudo mspdebug rf2500</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>值得一提的是对端口的设定,这一步应在编译写入前设置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo vim /etc/udev/rules.d/46-TI_launchpad.rules</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并将下表的内容写入其中，:wq</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ATTRS{idVendor}==&quot;0451&quot;,
</span><span class="line">ATTRS{idProduct}==&quot;f432&quot;,
</span><span class="line">MODE=&quot;0660&quot;, 
</span><span class="line">GROUP=&quot;plugdev&quot;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>为了使刚刚的修改在重启前生效，执行以下语句：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo restart udev</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是后把原来那个点过灯的单片机插入电脑，发现执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lo@lo:~$ sudo mspdebug rf2500</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后，原来一闪一闪的LED等灭了；单片机静静的等待着写入。
在执行了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(mspdebug) prog blink.elf 
</span><span class="line">Erasing...
</span><span class="line">Programming...
</span><span class="line">Writing  126 bytes to fc00 [section: .text]...
</span><span class="line">Writing   32 bytes to ffe0 [section: .vectors]...
</span><span class="line">Done, 158 bytes written
</span><span class="line">(mspdebug) ^D</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>单片机重新一闪一闪，不过执行的程序是新写如的了，即Programing Enviroment Done。</p>

<p>以下为重点参考站点：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://www.sakoman.com/OMAP/how-to-develop-msp430-launchpad-code-on-linux.html
</span><span class="line">http://hackaday.com/2010/08/11/how-to-launchpad-programming-with-linux/
</span><span class="line">http://sourceforge.net/apps/mediawiki/mspgcc/index.php?title=Linux_installation#Ubuntu</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MBTI职业性格测试]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/03/mbtizhi-ye-xing-ge-ce-shi"/>
    <updated>2012-04-03T12:31:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/03/mbtizhi-ye-xing-ge-ce-shi</id>
    <content type="html"><![CDATA[<p>在浏览博客时看到测试，想起高考的时候的测试，早就忘记结果了，当时也没有好好参考。今天来感，就在两个不同网站测试了下，结果一致的出乎意料————INFJ。</p>

<!--more-->
<blockquote><p>Psytopic分析：您的性格类型是“INFJ”(内向+直觉+情感+判断) </p><p>寻求思想、关系、物质等之间的意义和联系。希望了解什么能够激励人，对人有很强的洞察力。有责任心，坚持自己的价值观。对于怎样更好的服务大众有清晰的远景。在对于目标的实现过程中有计划而且果断坚定。 </p><p>INFJ型的人生活在思想的世界里。他们是独立的、有独创性的思想家，具有强烈的感情、坚定的原则和正直的人性。即使面对怀疑，INFJ型的人仍相信自己的看法与决定。他们对自己的评价高于其他的一切，包括流行观点 和存在的权威，这种内在的观念激发着他们的积极性。通常INFJ型的人具有本能的洞察力，能够看到事物更深层的含义。即使他人无法分享他们的热情，但灵感对于他们重要而令人信服。 INFJ型的人忠诚、坚定、富有理想 。他们珍视正直，十分坚定以至达到倔强的地步。因为他们的说服能力，以及对于什么对公共利益最有利有清楚的看法，所以 INFJ型的人会成为伟大的领导者。由于他们的贡献，他们通常会受到尊重或敬佩。因为珍视友谊 和和睦，INFJ型的人喜欢说服别人，使之相信他们的观点是正确的。通过运用嘉许和赞扬，而不是争吵和威胁，他们赢得了他人的合作。他们愿意毫无保留地激励同伴，避免争吵。通常INFJ型的人是深思熟虑的决策者，他 们觉得问题使人兴奋，在行动之前他们通常要仔细地考虑。他们喜欢每次全神贯注于一件事情，这会造成一段时期的专心致志。满怀热情与同情心，INFJ型的人强烈地渴望为他人的幸福做贡献。他们注意其他人的情感和利 益，能够很好地处理复杂的人。INFJ型的人本身具有深厚复杂的性格，既敏感又热切。他们内向，很难被人了解，但是愿意同自己信任的人分享内在的自我。他们往往有一个交往深厚、持久的小规模的朋友圈，在合适的氛 围中能产生充分的个人热情和激情。 </p><p>您适合的领域有：咨询、教育、科研等领域 文化、艺术、设计等</p><p>您适合的职业有：</p><p>· 特殊教育教师<br />· 建筑设计师<br />· 培训经理/培训师<br />· 职业指导顾问<br />· 心理咨询师<br />· 网站编辑<br />· 作家<br />· 仲裁人<br />· 人力资源经理<br />· 事业发展顾问<br />· 营销人员<br />· 企业组织发展顾问<br />· 职位分析人员<br />· 媒体特约规划师<br />· 编辑／艺术指导（杂志）<br />· 口译人员<br />· 社会科学工作者<br />· 心理诊疗师<br />· 大学教师（人文学科、艺术类）<br />· 心理学、教育学、社会学、哲学及其它领域的研究人员<br />· 作家<br />· 诗人<br />· 剧作家<br />· 电影编剧<br />· 电影导演<br />· 画家<br />· 雕塑家<br />· 音乐家<br />· 艺术顾问<br />· 设计师</p></blockquote>
<p>测试网址：<a herf="http://www.psytopic.com/" title="http://www.psytopic.com/">MBTJ测试</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Function]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/02/generating-function"/>
    <updated>2012-04-02T19:51:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/02/generating-function</id>
    <content type="html"><![CDATA[<p>先挖坑，清明期间研究下，再写笔记。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu的BUG修复小记]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/01/ubuntude-bugxiu-fu-xiao-ji"/>
    <updated>2012-04-01T23:39:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/01/ubuntude-bugxiu-fu-xiao-ji</id>
    <content type="html"><![CDATA[<p>最近一段时间系统各种龟速，WIN7莫名启动缓慢，而ubuntu运行缓慢，把WIN7换成了fedora却发现ruby的换环境同样不容易构建。耗费了大半天无果，回来研究ubuntu的问题。得到了
不少意外惊喜：</p>

<p>1.linux下的资源管理器：
<!--more-->
&lt;1&gt;ps</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps
</span><span class="line">a   :选择列出所有程序
</span><span class="line">u   :列出所有用户程序
</span><span class="line">x   ;类出所有tty的程序
</span><span class="line">EG:
</span><span class="line">lo@lo:~$ ps -aux</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>&lt;2&gt;top                                                                                                                                      <br />
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">lo@lo:~$ top</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>较ps而言的，top有其极大的有点，“动态”（每5秒刷新一次）。</p>

<p>&lt;3&gt;kill</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">kill -signal PID 
</span><span class="line">signal:
</span><span class="line">-1  :让该PID重新读取它的配置文件
</span><span class="line">-9  :杀掉该进程
</span><span class="line">-15 :停止该进程
</span><span class="line">EG：
</span><span class="line">lo@lo:~$ kill -9 1234</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>&lt;4&gt;uname</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">uname [-apnr]
</span><span class="line">-a  :列出所有的系统信息
</span><span class="line">-p  :列出CPU信息 
</span><span class="line">-n  :列出主机名
</span><span class="line">-r  :列出核心版本信息</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.BUG的表现：把一个cpu时刻占用在100%左右，系统变身蜗牛。
top命令使用后，看到一个upstart-udev-bridge的进程无赖的占用着一个CPU。而且简单的kill后，马上“原地复活”。后来还是GOOGLE的强大火力下找到了组织。&gt;原来是一个BUG啊。然后获取了两种解决方案：</p>

<p>&lt;1&gt;暂时止痛</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo service udev stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启后旧病复发。</p>

<p>&lt;2&gt;根治型</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1) In a terminal, run:
</span><span class="line">sudo add-apt-repository ppa:jamesodhunt/bug-829980
</span><span class="line">#This will show you some text and ask you to press return to enable this repository.
</span><span class="line">2) Run:
</span><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而这种根治的方案来源于一个强大的站点：
https://bugs.launchpad.net
<img src="https://bugs.launchpad.net/@@/launchpad-logo" />这是一个BUG上报，分布式解决的站点。          </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[血气]]></title>
    <link href="http://luoluo.github.com/blog/2012/03/29/xie-qi"/>
    <updated>2012-03-29T00:00:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/03/29/xie-qi</id>
    <content type="html"><![CDATA[<p><img class="middle" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Grave_of_W._B._Yeats%3B_Drumecliff,_Co_Sligo.jpg/200px-Grave_of_W._B._Yeats%3B_Drumecliff,_Co_Sligo.jpg" /></p>

<p>要有最朴素的生活，与最遥远的梦想。即使明日天寒地冻，路远马亡。</p>

<p>看到他往新买来的旅行包了装衣物，才知道，他真的要出发。恍然快两年过，躺在湖边草坪上畅谈人生的时光被标记着”入学初”被扔在记忆角落，那些对大学失望的总总，以及出去漂游的梦想早已盖满灰尘。
辉一直没有大学的状态，大学的生活根本根本不配他四年的汗水，他没有归属感，慌乱的过着大学生活，然而周遭的一切根本提不起他的兴趣。记忆中的意气风发就是在谈论骑行拉萨了吧。  他热爱旅行，火车，公路，冰川，峡口…有他的足迹。像大多数人一样，我过上了标准的大学生活，足迹留在寝室和教室之间，以尽量多上课来换取内心的安宁，虽然上课可能只是换个地睡觉、玩手机。  我已沦为大学生活的奴隶，靠游戏、网络、睡觉及偶尔的酒精来麻醉自己的神经，我们害怕闲下来，害怕闲时自己会去思考现在和未来，害怕面对。 靠眼前花花绿绿的屏幕来获取视觉的快感，靠游戏里的胜利、击败对手来获得短暂的“成就感”，靠玩游戏的技艺来赢得他人的尊重….     </p>

<p>我不敢说这是生活，我不敢说我有生活。写在最前面的话，是给有血气的少年的。</p>

<p>“指点江山，激昂文字”的少年们哪里去了？？每每谈起入学时对一切都像打鸡血那样的日子只会傻傻一笑，就如当初满怀激情的那个人不是你自己。我们怎么比时间变的都快，我们的适应里比变化还快，因为麻木的心对一切只须逆来顺受。我们的快乐由何而来，或则我们是否快乐？？ 快感是否也是欲壑难穷，靠在电脑前疯狂的点击鼠标键盘就能让一个人开心或郁闷几天，我们的感情世界是否有些苍白与廉价。</p>

<p>最近读了季老的《做人与做事》、劳伦斯的传，顿时产生了深深的无知感，感觉自己像是被阉割过的大多数一样。我们是机器工业时代的难民。自然被我们遗忘，我们不知敬畏自然、不知敬畏生命，我们常常目空一切，却不知自己什么都不是。我们不了解人为何而活，或许更为可能的情况是我们根本不会去考虑这个问题，不会有这个问题。 </p>

<p>我们的内心是否梦想、勇气。你是否敢去做自己现在最想做的事，放下一切，随心去旅行，用心去触碰这世界。是否愿意为自己的梦想买单，在这最美的年龄，是否愿意疯一把，写几个只属于自己的故事与人生里。我们的血气让狗吃了？？</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[categories的疑问]]></title>
    <link href="http://luoluo.github.com/blog/2012/03/27/categoriesde-yi-wen"/>
    <updated>2012-03-27T16:24:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/03/27/categoriesde-yi-wen</id>
    <content type="html"><![CDATA[<p>纠结了我好久的Categories问题
原来是跌倒在了—上，我来傻傻的以为—的作用是默认无分类，
却不知实际是语法标签。</p>

<p>注意点，不支持中文。和中文标符？
经过实验，支持中文；但是不可以把中文逗号作为分割符，分割符要用英文的。
如果错误的使用中文逗号来分割，结果就会产生一个由逗号连接的“Tag”。</p>

<p>后记：如何在Sidebar里显示自己的分类。这里使用了网有做的插件。代码如下：
<script src="https://gist.github.com/1366833.js?file=category_list.rb"></script></p>

<p>对markdown语法需要学习一下，下划线问题缠了半天。
晚安！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alias 利器]]></title>
    <link href="http://luoluo.github.com/blog/2012/03/26/alias-li-qi"/>
    <updated>2012-03-26T14:33:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/03/26/alias-li-qi</id>
    <content type="html"><![CDATA[
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">适用场合：惯用指令很长
</span><span class="line">使用目的：简化指令，提高指令输入效率
</span><span class="line">使用规则：
</span><span class="line">alias AliasName='NameToBeSimpler'   //注意：等号前后不允许空格。
</span><span class="line">unalias AliasName='NameToBeSimpler'  //取消以上的别名设置 
</span><span class="line">	举例：
</span><span class="line">alias rg='rake generate'
</span><span class="line">此时在命令行下输入
</span><span class="line">rg 与 rake generate 作用一致</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->
<p>按照以上的设置在重新开机后，输入</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lo@lo:/etc$ rg
</span><span class="line">rg：找不到命令</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>说明，rg命令已经失效了。为了使我们设置的别名长久有效，要把别名写在指定位置的文件里。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lo@lo: vim ~/.bashrc</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时使用rg，仍然是无效的，只有重启才可以生效。当然还有另外一种办法可以让他立即生效：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lo@lo:source ~/.bashrc</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面列一下我用的alias</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">alias rg='rake generate'
</span><span class="line">alias rd='rake deploy'
</span><span class="line">alias update='sudo apt-get update'
</span><span class="line">alias ..='cd ..' #据说是死罪
</span><span class="line">alias df='df -h'  #以M为单位查看磁盘空间
</span><span class="line">alias is='sudo apt-get install'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>alias 是一把利器，但是最好不要使用的尺度太大，免得离开自己的机器就会失去“安全感”。小用怡情，乱用伤身。		</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find 命令的使用]]></title>
    <link href="http://luoluo.github.com/blog/2012/03/26/find-ming-ling-de-shi-yong"/>
    <updated>2012-03-26T12:55:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/03/26/find-ming-ling-de-shi-yong</id>
    <content type="html"><![CDATA[<p>vim 中复制缓存与系统缓存的关系。</p>
]]></content>
  </entry>
  
</feed>
