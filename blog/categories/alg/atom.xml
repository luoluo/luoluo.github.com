<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Alg | LOG.02]]></title>
  <link href="http://luoluo.github.com/blog/categories/alg/atom.xml" rel="self"/>
  <link href="http://luoluo.github.com/"/>
  <updated>2012-06-09T16:45:16+08:00</updated>
  <id>http://luoluo.github.com/</id>
  <author>
    <name><![CDATA[Luoluo]]></name>
    <email><![CDATA[luoluo1920@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从分蛋糕说起]]></title>
    <link href="http://luoluo.github.com/blog/2012/06/04/cong-fen-dan-gao-shuo-qi"/>
    <updated>2012-06-04T16:04:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/06/04/cong-fen-dan-gao-shuo-qi</id>
    <content type="html"><![CDATA[<p>网友如下求助：如何分配总租值为2700的三个房间，使三人都满意。如果是两个人分得话，马上就想到了“小熊分蛋糕”的问题。
说熊妈妈两个熊宝宝一块蛋糕，一个合理的分割方案是：宝宝1切蛋糕，宝宝2选择蛋糕。此方案有一个妙处在于，博弈双方各占优势，又各占劣势，宝宝1切割的优势与选择的劣势的结合使得他必须尽可能降低其切割优势，因为他必须对他的切割劣势埋单，即切割尽可能平均。这样的结果就是：切割方不在具有优势，选择方就也丧失了劣势，因为前者已经放弃了优势(因为他选择尽可能平均分配)，使得他的选择的优势也失去了意义。最终的结果是：该分配双方均不占优势，双方均觉得公平。利用这个方案，可以很好的解决两个人分割利益\责任的问题，我们只需使一方为划分者，另一方为选择方就可以了。
显然，这个方案只能局限与两人分割情形。那么对于多人分割又当如何处理呢？
这里先说一下上述问题的升级版：假设熊妈妈给了宝宝们两块味道不同的蛋糕，一个合理的分割方案是：宝宝1切蛋糕1，宝宝2切蛋糕2，切某一蛋糕的宝宝就会丧失那次切割的选择权，即：宝宝2在选择蛋糕1的部分具有优先权，宝宝1在选择蛋糕2的部分具有优先选择权。如果两个宝宝的口味一致，即蛋糕对他们来说具有相同价值，那么就把问题转化为了两个基本分蛋糕的问题。  如果两个宝宝对蛋糕喜好的口味不一致，那么博弈的结果可能就是宝宝各会分得自己喜爱的完整蛋糕。
此问题可以衍生出一个现实问题：A，B公同租总价为p两房间房子。那么一个合理的分割方案为：A，B分别提供自己的定价方案：假设A对两房子的定价分别为a1,a2(a1+a2=p)；同理B对两房子的定价分别为b1,b2.则我们做以下计算：p1=(a1+b1)/2;p2=(a2+b2)/2;此时，两房子的定价即为p1,p2且满足p1+p2=p。那么房子如何分配呢？a1，b1中的大值者来负责p1，a2，b2中的大值者来负责p2.可以证明，该方案是一种很合理的分个方案。
那么对于更多个参与者，怎么处理，只需对上述过程拓展，即得到通解：
对n个人分担\负责价值p(分为n个子部分)的问题来说，解决方案：
第i个人对k部分的估价为：
<script type="math/tex"> 5 + 5 </script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/12/sort"/>
    <updated>2012-05-12T13:44:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/12/sort</id>
    <content type="html"><![CDATA[<h4 id="stl">STL中最常用的函数之一，排序的神器。</h4>
<p>###sort
{% codeblock function sort.cpp %}</p>
<algorithm>
template &lt;class RandomAccessIterator&gt;
  void sort ( RandomAccessIterator first, RandomAccessIterator last );

template &lt;class RandomAccessIterator, class Compare&gt;
  void sort ( RandomAccessIterator first, RandomAccessIterator last, Compare comp );
{% endcodeblock %}
###function
&gt;Sort elements in range
&gt;Sorts the elements in the range [first,last) into ascending order.
&gt;
&gt;The elements are compared using operator&lt; for the first version, and comp for the second.
&gt;
&gt;Elements that would compare equal to each other are not guaranteed to keep their original relative order.
&gt;
###Parameters
&gt;first, last
&gt;Random-Access iterators to the initial and final positions of the sequence to be sorted. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.
&gt;comp
&gt;Comparison function object that, taking two values of the same type than those contained in the range, returns true if the first argument goes before the second argument in the specific strict weak ordering it defines, and false otherwise.
&gt;
###Return value
&gt;none

###Example
{% codeblock example.cpp%}
// sort algorithm example
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

bool myfunction (int i,int j) { return (i&lt;j); }

struct myclass {
  bool operator() (int i,int j) { return (i&lt;j);}
} myobject;

int main () {
  int myints[] = {32,71,12,45,26,80,53,33};
  vector<int> myvector (myints, myints+8);               // 32 71 12 45 26 80 53 33
  vector<int>::iterator it;

  // using default comparison (operator &lt;):
  sort (myvector.begin(), myvector.begin()+4);           //(12 32 45 71)26 80 53 33

  // using function as comp
  sort (myvector.begin()+4, myvector.end(), myfunction); // 12 32 45 71(26 33 53 80)

  // using object as comp
  sort (myvector.begin(), myvector.end(), myobject);     //(12 26 32 33 45 53 71 80)

  // print out content:
  cout &lt;&lt; "myvector contains:";
  for (it=myvector.begin(); it!=myvector.end(); ++it)
    cout &lt;&lt; " " &lt;&lt; *it;

  cout &lt;&lt; endl;

  return 0;
}
{% endcodeblock %}

###Output:
&gt;myvector contains: 12 26 32 33 45 53 71 80

###Complexity
&gt;Approximately N*logN comparisons on average (where N is last-first).
&gt;In the worst case, up to N2, depending on specific sorting algorithm used by library implementation.
</int></int></vector></algorithm></iostream></algorithm>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Permutation]]></title>
    <link href="http://luoluo.github.com/blog/2012/05/09/next-permutation"/>
    <updated>2012-05-09T22:06:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/05/09/next-permutation</id>
    <content type="html"><![CDATA[<h3 id="tc">做TC练习的时候，学习高手的代码，看到了这个神器。用于生成不重复的且不小于当前排列的全排列。</h3>
<p>##next_permutation
{% codeblock function fun.cpp %}
 template &lt;class BidirectionalIterator&gt;
  bool next_permutation (BidirectionalIterator first,
                         BidirectionalIterator last );</p>

<p>template &lt;class BidirectionalIterator, class Compare&gt;
  bool next_permutation (BidirectionalIterator first,
                         BidirectionalIterator last, Compare comp);
{% endcodeblock %}
###Transform range to next permutation
&gt;Rearranges the elements in the range [first, last) into the lexicographically next greater permutation of elements. The comparisons of individual elements are performed using either operator&lt; for the first version, or comp for the second.</p>

<blockquote>
  <p>A permutation is each one of the N! possible arrangements the elements can take (where N is the number of elements in the range). Different permutations can be ordered according on how they compare lexicographicaly to each other; The first such-sorted possible permutation (the one that would compare lexicographically smaller to all other permutations) is the one which has all its elements sorted in ascending order, and the largest has all its elements sorted in descending order.</p>
</blockquote>

<blockquote>
  <p>If the function can determine the next higher permutation, it rearranges the elements as such and returns true. If that was not possible (because it is already at the largest), it rearranges the elements according to the first permutation (sorted in ascending order) and returns false.</p>
</blockquote>

<h3 id="parameters">Parameters</h3>
<blockquote>
  <p>first, last
Bidirectional iterators to the initial and final positions of the sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.
comp
Comparison function object that, taking two values of the same type than those contained in the range, returns true if the first argument is to be considered less than the second argument.</p>
</blockquote>

<h3 id="return-value">Return value</h3>
<blockquote>
  <p>true if the function could rearrange the object as a lexicographicaly greater permutation. Otherwise, the function returns false to indicate that the arrangement is not greater than the previous, but the lowest possible (sorted in ascending order).</p>
</blockquote>

<h3 id="example">Example</h3>
<p>{% codeblock next_permutation tset.cpp %}
#include <iostream>
#include <algorithm>
using namespace std;</algorithm></iostream></p>

<p>int main () {
  int myints[] = {1,2,3};</p>

<p>cout « “The 3! possible permutations with 3 elements:\n”;</p>

<p>sort (myints,myints+3);</p>

<p>do {
    cout « myints[0] « ” ” « myints[1] « ” ” « myints[2] « endl;
  } while ( next_permutation (myints,myints+3) );</p>

<p>return 0;
}
{% endcodeblock %}
###Output:
The 3! possible permutations with 3 elements:</p>

<p>1 2 3 <br />
1 3 2 <br />
2 1 3 <br />
2 3 1 <br />
3 1 2 <br />
3 2 1 <br />
####注意
当输出{1, 1, 1}的全排列时只输出一组“1 1 1”；
###上升全排列
  <code>int myints[] = {1,2,3};</code>
输出为：<br />
1 2 3 <br />
1 3 2 <br />
2 1 3 <br />
2 3 1 <br />
3 1 2 <br />
3 2 1 <br /></p>

<p><code>int myints[] = {3,2,1};</code>
输出为：<br />
3 2 1<br /></p>

<p><code>int myints[] = {2,3,1};</code>
输出为：<br />
2 3 1 <br />
3 1 2 <br />
3 2 1 <br />
####所以想得到给定数组元素的全排列，首先要<a href="http://luoluo.github.com/blog/2012/05/12/sort/">sort</a>为单调上升序列。
###Complexity
&gt;At most, performs one half as many swaps as the number of elements in the range.</p>

]]></content>
  </entry>
  
</feed>
