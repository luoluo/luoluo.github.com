<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | LOG.02]]></title>
  <link href="http://luoluo.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://luoluo.github.com/"/>
  <updated>2012-05-04T20:06:56+08:00</updated>
  <id>http://luoluo.github.com/</id>
  <author>
    <name><![CDATA[Luoluo]]></name>
    <email><![CDATA[luoluo1920@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TC at Linux]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/09/tc-at-lineux"/>
    <updated>2012-04-09T19:58:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/09/tc-at-lineux</id>
    <content type="html"><![CDATA[<p>HOW TO： TC ON LINUX</p>

<p>1.JAVA ENVIRONMENT（SUN-JAVA6）</p>

<p><1>添加partner源：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository "deb http://archive.canonical.com/u    buntu maverick partner"</span></code></pre></td></tr></table></div></figure></notextile></div>
<2>安装JRE
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install sun-java6-jre sun-java6-plugin</span></code></pre></td></tr></table></div></figure></notextile></div>
<3>安装JDK
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install sun-java6-jdk sun-java6-plugin</span></code></pre></td></tr></table></div></figure></notextile></div>
<4>查看版本
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -version</span></code></pre></td></tr></table></div></figure></notextile></div>
<5>设为默认JAVA
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --config java</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2.DOWNLOAD THE TC ARENA
<a href="http://www.topcoder.com/contest/arena/ContestAppletProd.jnlp">
DOWNLOAD </a></p>

<p>3.CONFIG THE AREAN
<a href="http://community.topcoder.com/tc?module=Static&d1=applet&d2=plugins"> 插件下载及配置DOWNLOAD </a>
推荐只使用KawigiEdit插件，该插件易于上手。</p>

<p>4.GET ON THE WAY, &amp; GOOD LUCK!
<a href="http://apps.topcoder.com/wiki/display/tc/How+to+Compete+in+SRM+Algorithm+Competitions">官方教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To:Lunchpad MSP430 programing with Linux]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/07/how-to-lunchpad-msp430-programing-with-linux"/>
    <updated>2012-04-07T04:37:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/07/how-to-lunchpad-msp430-programing-with-linux</id>
    <content type="html"><![CDATA[<p>天快亮了，反而没有什么倦意，一夜的奋战终见起色，称记忆清晰，做记录，供后车之鉴。开学不久就接到了五一前要交付的任务，4月探头，才逼的自己来做。windows莫名其妙的坏掉，把自己比逼linux这种直接的环境，一直感觉linux环境下自己面对问题，接近点底层，是个不错的选择。可是入门稍有门槛。毕竟文字的信息传递速度要小于图形化。加上自己的惰性，就迟迟未出发。</p>

<p>早就体会到实践的巨大力量，想重单片机起步逐渐理解计算机系统，并在最后系统。可是之前却是止步与WINDOWS，机缘巧合，投身LINUX麾下，顿感原来的那种清爽感。按需分配。</p>

<!--more-->


<p>1.LINUX下MSP430编程环境的搭建：  这个环境大概可以分为两个主要的部分：编译环境、写入环境。</p>

<p><1>编译环境：mspgcc
可以说绝大多数的时间都耗在了，在网上看了N多的教程，于是乎走了N多的弯路。情况是：
<blockquote><p>mspgcc4 is no longer supported. All contributions have been incorporated into mspgcc, which has newer versions of all components.</p></blockquote>
也就是说，mspgcc4是不在被支持的了，而mspgcc更新过后继承支持mspgcc4的特性。而网上看到的绝大多数教程是基于mspgcc4的，利用网上反复的教程，我在install 与 rm间徘徊，系统的错误提示很SIMPLE：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lo@lo:~$ /opt/msp-gcc-4.4.5/bin/msp-gcc -oS -o blink.elf blink.c
</span><span class='line'>bash: /opt/msp-gcc-4.4.5/bin/msp-gcc: 没有那个文件或目录</span></code></pre></td></tr></table></div></figure></notextile></div>
不知为何，mspgcc总是在躲起来，甚至 find 也没法，或则说它没有出现过。真是很奇怪。试了又试，错误提示一直未变。</p>

<p><2>写入环境：mspdebug
在单片机挂载到计算机上后，可以执行写入。在挂在后，单片机不再执行原有的程序，而是静静的等待写入，当<sup>D退出mspdebug后，单片机执行新写入的程序，</sup></p>

<p>看到了那样的提示，才暮然发现自己只需一个编译器和写入器，干嘛不直接安装呢？
这是看到了WIKI的提示，
<blockquote><p>mspgcc will be available in Ubuntu Oneiric.</p></blockquote>
而UBUNTU11.10 即 ONEIRIC。</p>

<p>于是乎：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install msp430-libc
</span><span class='line'>sudo apt-get install mspdebug
</span><span class='line'>sudo apt-get install msp430mcu
</span><span class='line'>sudo apt-get install binutils-msp430
</span><span class='line'>sudo apt-get install gcc-msp430
</span><span class='line'>sudo apt-get install gdb-msp430</span></code></pre></td></tr></table></div></figure></notextile></div>
编译和写入：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lo@lo:~$ msp430-gcc -oS -o blink.elf blink.c
</span><span class='line'>lo@lo:~$ sudo mspdebug rf2500</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>值得一提的是对端口的设定,这一步应在编译写入前设置：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/udev/rules.d/46-TI_launchpad.rules</span></code></pre></td></tr></table></div></figure></notextile></div>
并将下表的内容写入其中，:wq</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ATTRS{idVendor}==&quot;0451&quot;,
</span><span class='line'>ATTRS{idProduct}==&quot;f432&quot;,
</span><span class='line'>MODE=&quot;0660&quot;,
</span><span class='line'>GROUP=&quot;plugdev&quot;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>为了使刚刚的修改在重启前生效，执行以下语句：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo restart udev</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是后把原来那个点过灯的单片机插入电脑，发现执行
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lo@lo:~$ sudo mspdebug rf2500</span></code></pre></td></tr></table></div></figure></notextile></div>
后，原来一闪一闪的LED等灭了；单片机静静的等待着写入。
在执行了:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(mspdebug) prog blink.elf
</span><span class='line'>Erasing...
</span><span class='line'>Programming...
</span><span class='line'>Writing  126 bytes to fc00 [section: .text]...
</span><span class='line'>Writing   32 bytes to ffe0 [section: .vectors]...
</span><span class='line'>Done, 158 bytes written
</span><span class='line'>(mspdebug) ^D</span></code></pre></td></tr></table></div></figure></notextile></div>
单片机重新一闪一闪，不过执行的程序是新写如的了，即Programing Enviroment Done。</p>

<p>以下为重点参考站点：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.sakoman.com/OMAP/how-to-develop-msp430-launchpad-code-on-linux.html
</span><span class='line'>http://hackaday.com/2010/08/11/how-to-launchpad-programming-with-linux/
</span><span class='line'>http://sourceforge.net/apps/mediawiki/mspgcc/index.php?title=Linux_installation#Ubuntu</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu的BUG修复小记]]></title>
    <link href="http://luoluo.github.com/blog/2012/04/01/ubuntude-bugxiu-fu-xiao-ji"/>
    <updated>2012-04-01T23:39:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/04/01/ubuntude-bugxiu-fu-xiao-ji</id>
    <content type="html"><![CDATA[<p>最近一段时间系统各种龟速，WIN7莫名启动缓慢，而ubuntu运行缓慢，把WIN7换成了fedora却发现ruby的换环境同样不容易构建。耗费了大半天无果，回来研究ubuntu的问题。得到了
不少意外惊喜：</p>

<p>1.linux下的资源管理器：</p>

<!--more-->


<p><1>ps
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps
</span><span class='line'>a   :选择列出所有程序
</span><span class='line'>u   :列出所有用户程序
</span><span class='line'>x   ;类出所有tty的程序
</span><span class='line'>EG:
</span><span class='line'>lo@lo:~$ ps -aux</span></code></pre></td></tr></table></div></figure></notextile></div>
<2>top                                                                                                                                        <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lo@lo:~$ top</span></code></pre></td></tr></table></div></figure></notextile></div>
较ps而言的，top有其极大的有点，“动态”（每5秒刷新一次）。</p>

<p><3>kill
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill -signal PID
</span><span class='line'>signal:
</span><span class='line'>-1  :让该PID重新读取它的配置文件
</span><span class='line'>-9  :杀掉该进程
</span><span class='line'>-15 :停止该进程
</span><span class='line'>EG：
</span><span class='line'>lo@lo:~$ kill -9 1234</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><4>uname
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uname [-apnr]
</span><span class='line'>-a  :列出所有的系统信息
</span><span class='line'>-p  :列出CPU信息
</span><span class='line'>-n  :列出主机名
</span><span class='line'>-r  :列出核心版本信息</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2.BUG的表现：把一个cpu时刻占用在100%左右，系统变身蜗牛。
top命令使用后，看到一个upstart-udev-bridge的进程无赖的占用着一个CPU。而且简单的kill后，马上“原地复活”。后来还是GOOGLE的强大火力下找到了组织。>原来是一个BUG啊。然后获取了两种解决方案：</p>

<p><1>暂时止痛
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service udev stop</span></code></pre></td></tr></table></div></figure></notextile></div>
重启后旧病复发。</p>

<p><2>根治型
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1) In a terminal, run:
</span><span class='line'>sudo add-apt-repository ppa:jamesodhunt/bug-829980&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>This will show you some text and ask you to press return to enable this repository.&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>2) Run:
</span><span class='line'>sudo apt-get update &amp;&amp; sudo apt-get upgrade</span></code></pre></td></tr></table></div></figure></notextile></div>
而这种根治的方案来源于一个强大的站点：
https://bugs.launchpad.net
<img src="https://bugs.launchpad.net/@@/launchpad-logo">这是一个BUG上报，分布式解决的站点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 无线路由问题]]></title>
    <link href="http://luoluo.github.com/blog/2012/03/23/ubuntu-wu-xian-lu-you-wen-ti"/>
    <updated>2012-03-23T01:51:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/03/23/ubuntu-wu-xian-lu-you-wen-ti</id>
    <content type="html"><![CDATA[<p>ubuntu 11.10 后，笔记本常常出现搜不到寝室路由的无线信号，但是在这种情况下却可以搜到其他人的无线信号。笔记本是WINDOWS和UBUNTU的双系统，当切换到WINDOWS下时，就可以正常的搜索到并成功连接。问题出现在了哪里呢？</p>

<p>在网上看到很多用户遇到了类似的困境。最后采用的一个很有效的解决办法是：更改路由器的频段，由原来的自动改为9.据说大于9的时候就会出现连接异常，依照这样的理论在自动频段下就会“偶尔”出现连不上的情况。</p>

<!--more-->


<blockquote>
无线网卡默认是支持1-11频道（美国/中国），如果你的路由设为13或14频道就会出现这状况。
你可以把路由的频道改一下，或把网卡的地区改为日本也行。

笔记本电脑内置了Intel无线网卡，那有一种特殊情况需要注意，就是Intel无线网卡一般都只内置了11个信道，而目前国内的大多数无线路由器都提供了13个通信信道。当无线路由器的信道设置为12或13时，Intel的无线网卡是无法搜索到无线路由器的，表现出来就是找不到无线网络，跟你描述的情况很类似。解决方法很简单，就是手动将无线路由器的信道设置为1～11中一个即可，不要使用12和13两个信道。
</blockquote>


<p>还有网友的解决方案是：把宿舍网络ssid改了一下就能搜索到了。不过应该没有什么理论可靠性。</p>

<p>具体问题是来自哪里，现在还没有弄清楚的能力，以后知识多了，再来解决。</p>

<p>在这里看到了更多关于信道、路由的知识：http://skday.com/archives/384/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux 下文件乱码的问题]]></title>
    <link href="http://luoluo.github.com/blog/2012/03/21/linux-xia-wen-jian-luan-ma-de-wen-ti"/>
    <updated>2012-03-21T19:53:00+08:00</updated>
    <id>http://luoluo.github.com/blog/2012/03/21/linux-xia-wen-jian-luan-ma-de-wen-ti</id>
    <content type="html"><![CDATA[<p>   问题的出现在与Windows下与linux下的文件编码的差异。在wendows下的默认文件编码方式是GBK(gb2312)；而在Linux下的默认编码方式为UTF-8.这样在linux系统下打开一个在Win下编辑的文件就常常会出现乱码。</p>

<p>一个比较有效的解决办法就是转码。在网上找到的一个很有效的工具就是：ICONV。其常见使用格式如下</p>

<blockquote>
1.在Vim中直接进行转换文件 编码 ,比如将一个文件 转换成utf-8格式
:set fileencoding=utf-8
2. enconv 转换文件 编码 ，比如要将一个GBK编码 的文件 转换成UTF-8编码 ，操作如下
enconv -L zhCN -x UTF-8 filename
</blockquote>




<blockquote>
3.iconv 转换，iconv的命令格式如下：
iconv -f encoding -t encoding inputfile
比如将一个UTF-8 编码的文件转换成GBK编码
iconv -f GBK -t UTF-8 file1 -o file2
</blockquote>


<!--more-->


<p>下面是摘自网上的关于VIM编码的资料：</p>

<blockquote>和所有的流行文本编辑器一样，Vim 可以很好的编辑各种字符编码的文件，这当然包括UCS-2、UTF-8 等流行的 Unicode 编码方式。然而不幸的是，和很多来自 Linux 世界的软件一样，这需要你自己动手设置。
Vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)，它们的意义如下:
* encoding: Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。默认是根据你的locale选择.用户手册上建议只在 .vimrc 中改变它的值，事实上似乎也只有在.vimrc 中改变它的值才有意义。你可以用另外一种编码来编辑和保存文件，如你的vim的encoding为utf-8,所编辑的文件采用cp936编码,vim会自动将读入的文件转成utf-8(vim的能读懂的方式），而当你写入文件时,又会自动转回成cp936（文件的保存编码).
* fileencoding: Vim 中当前编辑的文件的字符编码方式，Vim 保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)。
* fileencodings: Vim自 动探测fileencoding的顺序列表， 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。因此最好将Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。
* termencoding: Vim 所工作的终端 (或者 Windows 的 Console 窗口) 的字符编码方式。如果vim所在的term与vim编码相同，则无需设置。如其不然，你可以用vim的termencoding选项将自动转换成term的编码.这个选项在 Windows 下对我们常用的 GUI 模式的 gVim 无效，而对 Console 模式的Vim 而言就是 Windows 控制台的代码页，并且通常我们不需要改变它。
好了，解释完了这一堆容易让新手犯糊涂的参数，我们来看看 Vim 的多字符编码方式支持是如何工作的。
1. Vim 启动，根据 .vimrc 中设置的 encoding 的值来设置 buffer、菜单文本、消息文的字符编码方式。
2. 读取需要编辑的文件，根据 fileencodings 中列出的字符编码方式逐一探测该文件编码方式。并设置 fileencoding 为探测到的，看起来是正确的 (注1) 字符编码方式。
3. 对比 fileencoding 和 encoding 的值，若不同则调用 iconv 将文件内容转换为encoding 所描述的字符编码方式，并且把转换后的内容放到为此文件开辟的 buffer 里，此时我们就可以开始编辑这个文件了。注意，完成这一步动作需要调用外部的 iconv.dll(注2)，你需要保证这个文件存在于 $VIMRUNTIME 或者其他列在 PATH 环境变量中的目录里。
4. 编辑完成后保存文件时，再次对比 fileencoding 和 encoding 的值。若不同，再次调用 iconv 将即将保存的 buffer 中的文本转换为 fileencoding 所描述的字符编码方式，并保存到指定的文件中。同样，这需要调用 iconv.dll由于 Unicode 能够包含几乎所有的语言的字符，而且 Unicode 的 UTF-8 编码方式又是非常具有性价比的编码方式 (空间消耗比 UCS-2 小)，因此建议 encoding 的值设置为utf-8。这么做的另一个理由是 encoding 设置为 utf-8 时，Vim 自动探测文件的编码方式会更准确 (或许这个理由才是主要的 ;)。我们在中文 Windows 里编辑的文件，为了兼顾与其他软件的兼容性，文件编码还是设置为 GB2312/GBK 比较合适，因此 fileencoding 建议设置为 chinese (chinese 是个别名，在 Unix 里表示 gb2312，在 Windows 里表示cp936，也就是 GBK 的代码页)。</blockquote>



]]></content>
  </entry>
  
</feed>
